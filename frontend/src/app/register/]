"use client";

import { TextField } from '@mui/material'
import SubmitButton from '../components/SubmitButton';
import axios from 'axios';
import { useForm, SubmitHandler } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import { useState } from 'react';
import * as yup from 'yup';

interface User {
	username: string,
	email: string,
	password: string,
	passwordConfirmation: string
};

export default function Register() {	

	const [user, setUser] = useState<User>({
		username: "",
		email: "",
		password: "",
		passwordConfirmation: ""
	})


	const validation = yup.object().shape({
		username: yup.string().required("Please enter your username."),
		email: yup.string().email("Invalid email format.").required("Please enter your email."),
		password: yup.string().required("Please enter your password.").min(8, "Password must be at least 8 characters.").max(20, "Password must not exceed 20 characters."),
		passwordConfirmation: yup.string().required("Please confirm your password").oneOf([yup.ref("password")], "Passwords do not match.")

	})

	const { register, handleSubmit, formState: {errors} } = useForm({
		resolver: yupResolver(validation)
	})

	return (

		<div className="flex justify-center items-center w-screen h-screen">
			<form 
				method='POST' 
				onSubmit={handleSubmit((data) => console.log(data))}	
				className="flex flex-col justify-around items-center shadow-md rounded-xl shadow-black w-1/4 h-3/4 p-6 bg-gray-300">
				<div className="flex w-full h-auto justify-center mb-5 items-center">
					<h1 className="text-4xl font-bold">
						Register	
					</h1>	
				</div>	
				
				<div className="flex flex-col w-full h-full gap-4">
					<TextField 
						{...register("username")} 
						label="Username" 
						type="text" 
						name="username-input"
						onChange={(e) => setUser({...user, username: e.target.value})} 
						helperText={errors.username?.message} 
						required	
						/>
					<TextField 
						{...register("email")}	
						label="Email" 
						type="email" 
						name="email-input"
						helperText={errors.email?.message} 
						required/>
					<TextField
						{...register("password")} 
						label="Password" 
						type= "password" 
						name="password-input"
						helperText={errors.password?.message} 
						required/>
					<TextField
						{...register("passwordConfirmation")}
						label="Confirm Password" 
						type="password" 
						name="password-confirmation-input"
						helperText={errors.passwordConfirmation?.message} 
						required/>
				</div>

				<SubmitButton />	
			</form>	
			{user.username}
		</div>
	);
}
